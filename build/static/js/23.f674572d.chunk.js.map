{"version":3,"sources":["components/Instructor/RowExistsLesson.js","components/Instructor/CaseUploadLesson.js"],"names":["useStyles","makeStyles","theme","formControl","minWidth","selectEmpty","GreenCheckbox","withStyles","root","color","green","checked","props","Checkbox","RowExistsLesson","row","classes","useState","flag_reviewable","setChecked","useEffect","TableRow","hover","TableCell","align","component","scope","lesson_id","lesson_name","FormControlLabel","className","checkbox","control","onChange","e","target","url","env","data","axios","patch","then","ret","catch","er","name","chap_id","chap_name","CaseUploadLesson","email","React","lessonName","setlessonName","courses","setCourses","courseSelected","setcourseSelected","user_id","setuser_id","isUpdate","setisUpdate","lesson_content","setlesson_content","chap_exists","setchap_exists","lesson_exists","setlesson_exists","chapSelected","setchapSelected","selectedFile","setSelectedFile","setfile","loadingUploadVideo","setloadingUploadVideo","config","getChapExists","course_id","url_chap_exists","get","user_id_ss","sessionStorage","getItem","uploaded_course","getUploadedCourse","getLessonExists","url_lesson_exists","handleUpload","formData","FormData","append","url_upload_lesson","post","swal2Timing","Grid","container","item","xs","FormControl","fullWidth","InputLabel","id","Select","labelId","value","map","ele","MenuItem","course_name","Box","my","Typography","variant","TableContainer","Paper","Table","table","aria-label","TableHead","TableBody","TextField","onKeyPress","which","label","type","files","reader","FileReader","file","onload","readAsDataURL","handleFileInputChange","data-browse-on-zone-click","Button","btn","onClick"],"mappings":"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","file":"static/js/23.f674572d.chunk.js","sourcesContent":["import { FormControlLabel, withStyles } from '@material-ui/core';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { green } from '@material-ui/core/colors';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport * as env from '../../config/env.config';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    minWidth: 120\r\n  },\r\n  selectEmpty: {}\r\n}));\r\n\r\nconst GreenCheckbox = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    '&$checked': {\r\n      color: green[600]\r\n    }\r\n  },\r\n  checked: {}\r\n})((props) => <Checkbox color='default' {...props} />);\r\n\r\nexport default function RowExistsLesson({ row }) {\r\n  const classes = useStyles();\r\n\r\n  const [checked, setChecked] = useState(row.flag_reviewable);\r\n\r\n  const handleChangeCheck = (e) => {\r\n    setChecked(e.target.checked);\r\n\r\n    const url = `${env.DEV_URL}/api/instructor/toggle-preview`;\r\n    const data = {\r\n      flag_reviewable: e.target.checked,\r\n      lesson_id: +row.lesson_id\r\n    };\r\n\r\n    axios\r\n      .patch(url, data, {})\r\n      .then((ret) => {})\r\n      .catch((er) => {});\r\n  };\r\n  useEffect(() => {}, []);\r\n\r\n  return (\r\n    <TableRow hover>\r\n      <TableCell align='left' component='th' scope='row'>\r\n        {row.lesson_id}\r\n      </TableCell>\r\n      <TableCell align='left'>{row.lesson_name}</TableCell>\r\n\r\n      <TableCell align='left'>\r\n        <FormControlLabel\r\n          className={classes.checkbox}\r\n          control={\r\n            <GreenCheckbox\r\n              checked={checked}\r\n              onChange={handleChangeCheck}\r\n              name='checkedG'\r\n            />\r\n          }\r\n        />\r\n      </TableCell>\r\n      <TableCell align='left'>{row.chap_id}</TableCell>\r\n\r\n      <TableCell align='left'>{row.chap_name}</TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n","import {\r\n  Box,\r\n  Button,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n  withStyles\r\n} from '@material-ui/core';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { green } from '@material-ui/core/colors';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Select from '@material-ui/core/Select';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport * as env from '../../config/env.config';\r\nimport { swal2Timing } from '../../config/swal2.config';\r\nimport RowExistsLesson from './RowExistsLesson';\r\n\r\nconst GreenCheckbox = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    '&$checked': {\r\n      color: green[600]\r\n    }\r\n  },\r\n  checked: {}\r\n})((props) => <Checkbox color='default' {...props} />);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    minWidth: 120\r\n  },\r\n  selectEmpty: {}\r\n}));\r\n\r\nexport default function CaseUploadLesson({ email }) {\r\n  const classes = useStyles();\r\n  const [age, setAge] = React.useState('');\r\n  const [lessonName, setlessonName] = React.useState('');\r\n  const [courses, setCourses] = useState([]);\r\n  const [courseSelected, setcourseSelected] = useState('');\r\n  const [user_id, setuser_id] = useState(0);\r\n  const [isUpdate, setisUpdate] = useState(false);\r\n  const [lesson_content, setlesson_content] = useState('');\r\n  const [chap_exists, setchap_exists] = useState([1, 2, 3]);\r\n  const [lesson_exists, setlesson_exists] = useState([]);\r\n  const [chapSelected, setchapSelected] = useState(null);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [file, setfile] = useState('');\r\n  const [loadingUploadVideo, setloadingUploadVideo] = useState(false);\r\n\r\n  const config = {};\r\n\r\n  const handleChapChange = (e) => {\r\n    setisUpdate(!isUpdate);\r\n    setchapSelected(e.target.value);\r\n    getLessonExists(e.target.value);\r\n  };\r\n\r\n  function getUploadedCourse() {\r\n    const url = `${env.DEV_URL}/api/instructor/uploaded-course/${email}`;\r\n    axios.get(url, config).then((ret) => {\r\n      setCourses(ret.data.uploaded_course);\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    const user_id_ss = sessionStorage.getItem('user_login_id');\r\n    setuser_id(+user_id_ss);\r\n    getUploadedCourse();\r\n  }, []);\r\n\r\n  function getChapExists(course_id) {\r\n    const url_chap_exists = `${\r\n      env.DEV_URL\r\n    }/api/instructor/chap-exists/${+course_id}`;\r\n\r\n    axios\r\n      .get(url_chap_exists, {})\r\n      .then((ret) => {\r\n        setchap_exists(ret.data.chap_exists);\r\n      })\r\n      .catch((er) => {\r\n        setchap_exists([]);\r\n      });\r\n  }\r\n\r\n  const handleFileInputChange = (e) => {\r\n    setfile(e.target.files[0]);\r\n    let reader = new FileReader();\r\n\r\n    let file = e.target.files[0];\r\n\r\n    reader.onload = () => {\r\n      setSelectedFile(file);\r\n    };\r\n\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  function getLessonExists(chap_id) {\r\n    const url_lesson_exists = `${\r\n      env.DEV_URL\r\n    }/api/instructor/lesson-exists/${+chap_id}`;\r\n\r\n    axios\r\n      .get(url_lesson_exists, {})\r\n      .then((ret) => {\r\n        setlesson_exists(ret.data.lesson_exists);\r\n      })\r\n      .catch((er) => {\r\n        setlesson_exists([]);\r\n      });\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setcourseSelected(e.target.value);\r\n    getChapExists(e.target.value);\r\n\r\n    setisUpdate(!isUpdate);\r\n  };\r\n\r\n  const handleUpload = (e) => {\r\n    const data = {\r\n      course_id: +courseSelected,\r\n      user_id: user_id\r\n    };\r\n    const formData = new FormData();\r\n\r\n    if (\r\n      courseSelected === '' ||\r\n      lessonName === '' ||\r\n      lesson_content === '' ||\r\n      user_id === ''\r\n    ) {\r\n      const title = 'error!';\r\n      const html = 'Cannot empty!';\r\n      const timer = 2500;\r\n      const icon = 'error';\r\n      swal2Timing(title, html, timer, icon);\r\n      return;\r\n    }\r\n\r\n    formData.append('lesson_video', selectedFile);\r\n    formData.append('course_id', +courseSelected);\r\n    formData.append('chap_id', +chapSelected);\r\n    formData.append('lesson_name', lessonName);\r\n    formData.append('lesson_content', lesson_content);\r\n    formData.append('user_id', user_id);\r\n\r\n    setloadingUploadVideo(true);\r\n    const url_upload_lesson = `${env.DEV_URL}/api/instructor/upload-lesson`;\r\n    axios\r\n      .post(url_upload_lesson, formData, {})\r\n      .then((ret) => {\r\n        setloadingUploadVideo(false);\r\n        setisUpdate(!isUpdate);\r\n        const title = 'Success!';\r\n        const html = 'Lesson upload success!';\r\n        const timer = 2500;\r\n        const icon = 'success';\r\n        swal2Timing(title, html, timer, icon);\r\n      })\r\n      .catch((er) => {\r\n        setloadingUploadVideo(false);\r\n\r\n        setisUpdate(!isUpdate);\r\n\r\n        const title = 'error!';\r\n        const html = 'Something broke!';\r\n        const timer = 2500;\r\n        const icon = 'error';\r\n        swal2Timing(title, html, timer, icon);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getChapExists(courseSelected);\r\n    getLessonExists(chapSelected);\r\n  }, [isUpdate, loadingUploadVideo]);\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid item xs={12}>\r\n        <FormControl fullWidth className={classes.formControl}>\r\n          <InputLabel id='demo-simple-select-error-label'>\r\n            Course uploaded\r\n          </InputLabel>\r\n          <Select\r\n            fullWidth\r\n            labelId='demo-simple-select-error-label'\r\n            id='demo-simple-select-error'\r\n            value={courseSelected}\r\n            onChange={handleChange}\r\n          >\r\n            {courses.map((ele) => {\r\n              return (\r\n                <MenuItem\r\n                  key={ele.course_id}\r\n                  name={ele.course_name}\r\n                  value={ele.course_id}\r\n                >\r\n                  {ele.course_name}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n          {/* <FormHelperText>Error</FormHelperText> */}\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <Box my={3}>\r\n          <Typography variant='h6'>Chapter exists information</Typography>\r\n        </Box>\r\n        <Box my={3}>\r\n          <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label='simple table'>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell align='left'>Chap id</TableCell>\r\n                  <TableCell align='left'>Chap name</TableCell>\r\n                  <TableCell align='left'>Course name</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {chap_exists.map((row) => (\r\n                  <TableRow hover key={row.chap_id}>\r\n                    <TableCell align='left' component='th' scope='row'>\r\n                      {row.chap_id}\r\n                    </TableCell>\r\n                    <TableCell align='left'>{row.chap_name}</TableCell>\r\n                    <TableCell align='left'>{row.course_name}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Box>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <FormControl fullWidth className={classes.formControl}>\r\n          <InputLabel>Choose chapter to upload lesson</InputLabel>\r\n          <Select fullWidth value={chapSelected} onChange={handleChapChange}>\r\n            {chap_exists.map((ele) => {\r\n              return (\r\n                <MenuItem key={ele.chap_id} value={ele.chap_id}>\r\n                  {ele.chap_name}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <Box my={3}>\r\n          <Typography variant='h6'>Lesson exists information</Typography>\r\n        </Box>\r\n        <Box my={3}>\r\n          <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label='simple table'>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell align='left'>Lesson id</TableCell>\r\n                  <TableCell align='left'>Lesson name</TableCell>\r\n                  <TableCell align='left'>Is allow preview</TableCell>\r\n                  <TableCell align='left'>Chap id</TableCell>\r\n\r\n                  <TableCell align='left'>Chap name</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {lesson_exists.map((row) => {\r\n                  return <RowExistsLesson row={row} key={row.lesson_id} />;\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Box>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <Box my={3}>\r\n          <FormControl fullWidth>\r\n            <TextField\r\n              fullWidth\r\n              onKeyPress={(e) => {\r\n                if (e.which === 13) {\r\n                  handleUpload(e);\r\n                }\r\n              }}\r\n              label='Lesson name'\r\n              value={lessonName}\r\n              onChange={(e) => setlessonName(e.target.value)}\r\n            />\r\n          </FormControl>\r\n        </Box>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <Box my={3}>\r\n          <Typography variant='h6' component='p'>\r\n            Lesson content\r\n          </Typography>\r\n        </Box>\r\n        <FormControl fullWidth>\r\n          <ReactQuill\r\n            theme='snow'\r\n            value={lesson_content}\r\n            onChange={setlesson_content}\r\n          />\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <Box my={3}>\r\n          <Typography variant='h6' component='p'>\r\n            Lesson video\r\n          </Typography>\r\n        </Box>\r\n        <FormControl fullWidth>\r\n          <input\r\n            id='input-b2'\r\n            name='input-b2'\r\n            type='file'\r\n            className='file'\r\n            onChange={(e) => handleFileInputChange(e)}\r\n            // onChange={(e) => onUploadAva(e)}\r\n            // onChange={(e) => uploadImageChange(e)}\r\n            data-browse-on-zone-click='true'\r\n          ></input>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <Box my={3}>\r\n          {loadingUploadVideo === true ? (\r\n            <Button\r\n              className={classes.btn}\r\n              fullWidth\r\n              variant='outlined'\r\n              color='primary'\r\n              onClick={handleUpload}\r\n            >\r\n              Loading ...\r\n            </Button>\r\n          ) : (\r\n            <Button\r\n              className={classes.btn}\r\n              variant='contained'\r\n              color='primary'\r\n              onClick={handleUpload}\r\n            >\r\n              Upload{' '}\r\n            </Button>\r\n          )}\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n"],"sourceRoot":""}