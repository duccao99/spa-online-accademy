{"version":3,"sources":["components/CardCourse/CardCourse.js"],"names":["GreenCheckbox","withStyles","root","color","green","checked","props","useStyles","makeStyles","theme","icon","marginRight","spacing","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","boxShadow","cardMedia","cardContent","flexGrow","footer","menuButton","title","btn_sign_in","textDecoration","ten_most_newest_courses","textAlign","marginBottom","outstanding_courses","card_wrapper","link","typo","card_action","alignItems","position","badge_bestSeller","width","badge_mostView","badge_newest","sale","checkbox","margin","favo","top","right","zIndex","border","defaultProps","connect","state","cart_global_state","cartReducer","cart","dispatch","dispatchAddToCart","course_id","user_id","course_price","course_ava","course_name","course_title","type","ADD_COURSE_TO_CART","payload","course_avatar_url","course_fee","subject_name","user_name","is_finished","avg_rate","most_stu_enroll","most_view_courses","newest_courses","isLogout","isUpdateFromPagi","setFavoComponentUpdate","favoComponentUpdate","course_favo_id","course_favo_status","useState","is_best_seller","set_is_best_seller","is_newest","set_is_newest","is_sales","set_is_sales","set_sale","set_all_sales","is_in_cart","set_is_in_cart","toggle_buy_click","set_toggle_buy_click","email","set_email","show_btn","set_show_btn","user_role","setUser_role","setChecked","isUpdate","setisUpdate","is_favorite","set_is_favorite","getIsFavorite","url_is_favo","undefined","env","axios","get","then","ret","data","catch","er","console","log","response","handleFavoriteClick","e","toggle_favorite_url","sessionStorage","getItem","patch","useEffect","debounce","all_sales_url","all_sales","i","length","sale_percent","flag","handleLinkClick","classes","Fragment","className","onClick","to","image","cn","variant","size","px","justifyContent","badgeContent","anchorOrigin","vertical","horizontal","gutterBottom","component","Math","floor","disabled","curr_user_id","control","onChange","target","finished_url","name","label"],"mappings":"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","file":"static/js/20.7b1688e8.chunk.js","sourcesContent":["import { Box, FormControlLabel, withStyles } from '@material-ui/core';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { green } from '@material-ui/core/colors';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport axios from 'axios';\r\nimport cn from 'classnames';\r\nimport { debounce } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { ADD_COURSE_TO_CART } from '../../actionTypes/cart.type';\r\nimport * as env from '../../config/env.config';\r\n\r\nconst common_spacing = 32;\r\n\r\nconst GreenCheckbox = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    '&$checked': {\r\n      color: green[600]\r\n    }\r\n  },\r\n  checked: {}\r\n})((props) => <Checkbox color='default' {...props} />);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  heroContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6)\r\n  },\r\n  heroButtons: {\r\n    marginTop: theme.spacing(4)\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(8),\r\n    paddingBottom: theme.spacing(8)\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    boxShadow: '0 4px 8px rgb(0 1 1 / 10%)'\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '56.25%' // 16:9\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1\r\n  },\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(6)\r\n  },\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  },\r\n  btn_sign_in: {\r\n    color: 'inherit',\r\n    textDecoration: 'none',\r\n    '&:visited': {\r\n      color: 'inherit',\r\n      textDecoration: 'none'\r\n    }\r\n  },\r\n  ten_most_newest_courses: {\r\n    textAlign: 'center',\r\n    marginTop: common_spacing,\r\n    marginBottom: common_spacing\r\n  },\r\n  outstanding_courses: {\r\n    textAlign: 'center',\r\n    marginTop: common_spacing,\r\n    marginBottom: common_spacing\r\n  },\r\n  card_wrapper: {\r\n    // marginBottom: common_spacing * 2,\r\n  },\r\n  link: {\r\n    color: 'inherit',\r\n    textDecoration: 'none',\r\n    '&:visited': {\r\n      color: 'inherit',\r\n      textDecoration: 'none'\r\n    }\r\n  },\r\n  typo: {\r\n    textAlign: 'left'\r\n  },\r\n  card_action: {\r\n    display: 'flex',\r\n    alignItems: 'flex-end',\r\n    height: '100%',\r\n    position: 'relative'\r\n  },\r\n  badge_bestSeller: {\r\n    '& .MuiBadge-anchorOriginBottomLeftRectangle': {\r\n      width: '100px'\r\n    }\r\n  },\r\n  badge_mostView: {\r\n    '& .MuiBadge-anchorOriginBottomLeftRectangle': {\r\n      width: '100px',\r\n      backgroundColor: 'lightskyblue',\r\n      color: 'lightyellow',\r\n      display: 'none'\r\n    }\r\n  },\r\n  badge_newest: {\r\n    '& .MuiBadge-anchorOriginBottomLeftRectangle': {\r\n      width: '100px',\r\n\r\n      backgroundColor: '#e2e27a'\r\n    }\r\n  },\r\n  sale: {\r\n    textDecoration: 'line-through;'\r\n  },\r\n  checkbox: {\r\n    margin: 0,\r\n    marginBottom: -5\r\n  },\r\n  favo: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    right: 0,\r\n    zIndex: '1500!important',\r\n    border: 'none!important',\r\n    '& .MuiButtonBase-root': {\r\n      border: 'none!important',\r\n      color: '#95f0ff'\r\n    },\r\n    '& .MuiButton-outlinedPrimary': {\r\n      border: 'none!important'\r\n    }\r\n  }\r\n}));\r\n\r\nconst defaultProps = {\r\n  color: 'secondary'\r\n};\r\n\r\nfunction CardCourse(props) {\r\n  const {\r\n    course_avatar_url,\r\n    course_fee,\r\n    course_name,\r\n    course_title,\r\n    course_id,\r\n    subject_name,\r\n    user_name,\r\n    is_finished,\r\n    user_id,\r\n    avg_rate,\r\n    most_stu_enroll,\r\n    most_view_courses,\r\n    newest_courses,\r\n    dispatchAddToCart,\r\n    cart_global_state,\r\n    isLogout,\r\n    isUpdateFromPagi,\r\n    // course detail problem\r\n    // setUpdateCourseDetail,\r\n    // updateCourseDetail,\r\n    setFavoComponentUpdate,\r\n    favoComponentUpdate,\r\n    course_favo_id,\r\n    course_favo_status\r\n  } = props;\r\n\r\n  const [is_best_seller, set_is_best_seller] = useState(false);\r\n  const [is_most_view, set_is_most_view] = useState(false);\r\n  const [is_newest, set_is_newest] = useState(false);\r\n  const [is_sales, set_is_sales] = useState(false);\r\n  const [sale, set_sale] = useState(0);\r\n  const [all_sales, set_all_sales] = useState([]);\r\n  const [is_in_cart, set_is_in_cart] = useState(false);\r\n  const [toggle_buy_click, set_toggle_buy_click] = useState(false);\r\n  const [email, set_email] = useState('');\r\n  const [show_btn, set_show_btn] = useState(false);\r\n  const [user_role, setUser_role] = useState(0);\r\n  const [checked, setChecked] = useState(is_finished);\r\n  const [isUpdate, setisUpdate] = useState(false);\r\n  const [is_favorite, set_is_favorite] = useState(false);\r\n\r\n  const handleChangeCheck = (e) => {\r\n    const curr_user_id = sessionStorage.getItem('user_login_id');\r\n\r\n    setChecked(e.target.checked);\r\n    const data = {\r\n      is_finished: e.target.checked,\r\n      course_id: course_id,\r\n      user_id: curr_user_id\r\n    };\r\n\r\n    const finished_url = `${env.DEV_URL}/api/instructor/toggle-finished-course/`;\r\n    axios.patch(finished_url, data, {}).then((ret) => {});\r\n    setisUpdate(!isUpdate);\r\n  };\r\n\r\n  const handleBuyClick = (e) => {\r\n    const curr_user_id = sessionStorage.getItem('user_login_id');\r\n\r\n    dispatchAddToCart(\r\n      course_id,\r\n      +curr_user_id,\r\n      course_fee,\r\n      course_avatar_url,\r\n      course_name,\r\n      course_title\r\n    );\r\n  };\r\n\r\n  function allSales() {\r\n    debounce(() => {\r\n      const all_sales_url = `${env.DEV_URL}/api/course/all-sales`;\r\n      const config = {};\r\n      axios.get(all_sales_url, config).then((ret) => {\r\n        set_all_sales(ret.data.all_sales);\r\n        if (ret.data.all_sales !== undefined) {\r\n          for (let i = 0; i < ret.data.all_sales.length; ++i) {\r\n            if (course_id === ret.data.all_sales[i].course_id) {\r\n              set_is_sales(true);\r\n              set_sale(+ret.data.all_sales[i].sale_percent);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }, 500)();\r\n  }\r\n\r\n  function getIsFavorite(user_id, course_id) {\r\n    let url_is_favo = '';\r\n    if (course_favo_id !== undefined) {\r\n      url_is_favo = `${env.DEV_URL}/api/student/is-favorite?course_id=${course_favo_id}&user_id=${user_id}`;\r\n    } else {\r\n      url_is_favo = `${env.DEV_URL}/api/student/is-favorite?course_id=${course_id}&user_id=${user_id}`;\r\n    }\r\n\r\n    axios\r\n      .get(url_is_favo, {})\r\n      .then((ret) => {\r\n        set_is_favorite(ret.data.is_favorite);\r\n      })\r\n      .catch((er) => {\r\n        console.log(er.response);\r\n      });\r\n  }\r\n\r\n  const handleFavoriteClick = (e) => {\r\n    const toggle_favorite_url = `${env.DEV_URL}/api/student/toggle-favorite`;\r\n    const data = {\r\n      user_id: +sessionStorage.getItem('user_login_id'),\r\n      course_id: course_id,\r\n      is_favorite: is_favorite\r\n    };\r\n\r\n    if (\r\n      setFavoComponentUpdate !== undefined &&\r\n      setFavoComponentUpdate !== null\r\n    ) {\r\n      setFavoComponentUpdate(!favoComponentUpdate);\r\n    }\r\n\r\n    axios.patch(toggle_favorite_url, data, {}).then((ret) => {\r\n      getIsFavorite(data.user_id, data.course_id);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // favo\r\n\r\n    if (course_favo_status !== undefined) {\r\n      set_is_favorite(course_favo_status);\r\n    } else {\r\n      getIsFavorite(+sessionStorage.getItem('user_login_id'), course_id);\r\n    }\r\n    // role\r\n    const user_role = sessionStorage.getItem('user_role');\r\n    setUser_role(+user_role);\r\n    // sale\r\n    debounce(() => {\r\n      const all_sales_url = `${env.DEV_URL}/api/course/all-sales`;\r\n      const config = {};\r\n      axios.get(all_sales_url, config).then((ret) => {\r\n        set_all_sales(ret.data.all_sales);\r\n\r\n        if (ret.data.all_sales !== undefined) {\r\n          for (let i = 0; i < ret.data.all_sales.length; ++i) {\r\n            if (course_id === ret.data.all_sales[i].course_id) {\r\n              set_is_sales(true);\r\n              set_sale(+ret.data.all_sales[i].sale_percent);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }, 500)();\r\n    // This stuff make app broken !!!\r\n\r\n    const email = sessionStorage.getItem('email');\r\n\r\n    if (isLogout === true) {\r\n      set_show_btn(false);\r\n    } else {\r\n      set_show_btn(true);\r\n    }\r\n\r\n    if (email === null) {\r\n      set_email(undefined);\r\n    } else if (email === undefined) {\r\n      set_email(undefined);\r\n    } else if (email === '') {\r\n      set_email(undefined);\r\n    }\r\n    set_email(email);\r\n\r\n    if (cart_global_state !== undefined) {\r\n      for (let i = 0; i < cart_global_state.length; ++i) {\r\n        if (cart_global_state[i].course_id === course_id) {\r\n          set_is_in_cart(true);\r\n\r\n          set_toggle_buy_click(!toggle_buy_click);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (most_stu_enroll !== undefined) {\r\n      let flag = false;\r\n\r\n      for (let i = 0; i < most_stu_enroll.length; ++i) {\r\n        if (+course_id === +most_stu_enroll[i].course_id) {\r\n          flag = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (flag === true) {\r\n        set_is_best_seller(true);\r\n        return;\r\n      } else {\r\n        set_is_best_seller(false);\r\n      }\r\n    }\r\n\r\n    if (newest_courses !== undefined) {\r\n      let flag = false;\r\n\r\n      for (let i = 0; i < newest_courses.length; ++i) {\r\n        if (+course_id === +newest_courses[i].course_id) {\r\n          flag = true;\r\n          set_is_newest(true);\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (flag === true) {\r\n        set_is_newest(true);\r\n        return;\r\n      } else {\r\n        set_is_newest(false);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // [most_stu_enroll, most_view_courses, newest_courses, all_sales]\r\n  }, [\r\n    most_stu_enroll,\r\n    most_view_courses,\r\n    newest_courses,\r\n    // toggle_buy_click,\r\n    cart_global_state,\r\n    email,\r\n    isLogout,\r\n    show_btn,\r\n    // bestseller problem\r\n    // is_best_seller,\r\n    // is_newest,\r\n    isUpdate,\r\n    isUpdateFromPagi,\r\n    is_favorite,\r\n    favoComponentUpdate\r\n  ]);\r\n\r\n  const handleLinkClick = (e) => {\r\n    // setUpdateCourseDetail(!updateCourseDetail);\r\n  };\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <React.Fragment>\r\n      <Card className={classes.card}>\r\n        <Box onClick={handleLinkClick}>\r\n          <CardActionArea>\r\n            <Link className={classes.link} to={`/course/${course_id}`}>\r\n              <CardMedia\r\n                className={classes.cardMedia}\r\n                image={`${course_avatar_url}`}\r\n                title='Image title'\r\n              />\r\n            </Link>\r\n            {+user_role === 2 ? (\r\n              <Box>\r\n                {+is_favorite === 1 ? (\r\n                  <Link\r\n                    onClick={handleFavoriteClick}\r\n                    className={cn(classes.link, classes.favo)}\r\n                    // to={`/course/${course_id}`}\r\n                  >\r\n                    <Button variant='outlined' size='small' color='primary'>\r\n                      <FavoriteIcon />\r\n                    </Button>\r\n                  </Link>\r\n                ) : (\r\n                  <Link\r\n                    onClick={handleFavoriteClick}\r\n                    className={cn(classes.link, classes.favo)}\r\n                    // to={`/course/${course_id}`}\r\n                  >\r\n                    <Button variant='outlined' size='small' color='primary'>\r\n                      <FavoriteBorderIcon />\r\n                    </Button>\r\n                  </Link>\r\n                )}\r\n              </Box>\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            {is_best_seller === true ? (\r\n              <Box\r\n                display='flex'\r\n                px={8}\r\n                justifyContent='flex-start'\r\n                width='100%'\r\n              >\r\n                <Badge\r\n                  className={classes.badge_bestSeller}\r\n                  variant='standard'\r\n                  badgeContent='Best seller'\r\n                  {...defaultProps}\r\n                  anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left'\r\n                  }}\r\n                />\r\n              </Box>\r\n            ) : is_newest === true ? (\r\n              <Box\r\n                display='flex'\r\n                px={8}\r\n                justifyContent='flex-start'\r\n                width='100%'\r\n              >\r\n                <Badge\r\n                  className={classes.badge_newest}\r\n                  variant='standard'\r\n                  badgeContent='New'\r\n                  anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left'\r\n                  }}\r\n                />\r\n              </Box>\r\n            ) : (\r\n              <Box></Box>\r\n            )}\r\n\r\n            <CardContent className={classes.cardContent}>\r\n              <Typography\r\n                className={classes.typo}\r\n                gutterBottom\r\n                variant='h6'\r\n                component='p'\r\n              >\r\n                {course_name}\r\n              </Typography>\r\n              <Typography className={classes.typo}>{subject_name}</Typography>\r\n              <Typography className={classes.typo}> {user_name}</Typography>\r\n              <Typography className={classes.typo}>Rate: {avg_rate}</Typography>\r\n\r\n              {is_sales ? (\r\n                <React.Fragment>\r\n                  <Typography className={cn(classes.typo, classes.sale)}>\r\n                    {course_fee}$\r\n                  </Typography>\r\n                  <Typography className={classes.typo}>\r\n                    {' '}\r\n                    Sale: {course_fee -\r\n                      Math.floor((course_fee * sale) / 100)}${' '}\r\n                  </Typography>\r\n                </React.Fragment>\r\n              ) : (\r\n                <Typography className={classes.typo}>{course_fee}$</Typography>\r\n              )}\r\n            </CardContent>\r\n          </CardActionArea>\r\n        </Box>\r\n\r\n        {email !== undefined ? (\r\n          <CardActions className={classes.card_action}>\r\n            {user_role === 2 || user_role === 4 ? (\r\n              <Button\r\n                variant='contained'\r\n                size='small'\r\n                color='primary'\r\n                disabled={is_in_cart === true}\r\n                onClick={handleBuyClick}\r\n              >\r\n                Buy\r\n              </Button>\r\n            ) : (\r\n              <div>\r\n                {user_role === 3 &&\r\n                user_id === +sessionStorage.getItem('user_login_id') ? (\r\n                  <FormControlLabel\r\n                    className={classes.checkbox}\r\n                    control={\r\n                      <GreenCheckbox\r\n                        checked={checked}\r\n                        onChange={handleChangeCheck}\r\n                        name='checkedG'\r\n                      />\r\n                    }\r\n                    label='Is finished'\r\n                  />\r\n                ) : (\r\n                  ''\r\n                )}\r\n              </div>\r\n            )}\r\n            <Link\r\n              onClick={handleLinkClick}\r\n              className={classes.link}\r\n              to={`/course/${course_id}`}\r\n            >\r\n              <Button variant='outlined' size='small' color='primary'>\r\n                Detail\r\n              </Button>\r\n            </Link>\r\n          </CardActions>\r\n        ) : (\r\n          <React.Fragment></React.Fragment>\r\n        )}\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    cart_global_state: state.cartReducer.cart\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    dispatchAddToCart: (\r\n      course_id,\r\n      user_id,\r\n      course_price,\r\n      course_ava,\r\n      course_name,\r\n      course_title\r\n    ) => {\r\n      dispatch({\r\n        type: ADD_COURSE_TO_CART,\r\n        payload: {\r\n          course_id: course_id,\r\n          course_price: course_price,\r\n          course_ava: course_ava,\r\n          course_name: course_name,\r\n          course_title: course_title,\r\n          user_id: user_id\r\n        }\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardCourse);\r\n"],"sourceRoot":""}